{"version":3,"file":"myauth.component.js","sourceRoot":"","sources":["../../home/tallion.com.ar/nolgiati/Desktop/ng2-document-type-authentication/tmp/broccoli_type_script_compiler-input_base_path-lKBsqI6H.tmp/0/src/app/auth/myauth.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,qBAAiC,eAAe,CAAC,CAAA;AACjD,qBAAmB,eAAe,CAAC,CAAA;AACnC,2BAAyB,iBAAiB,CAAC,CAAA;AAC3C,wBAAsB,cAAc,CAAC,CAAA;AACrC,QAAO,SAAS,CAAC,CAAA;AAEjB,iBAAU,EAAE,CAAA;AACZ;IAMI,qBAAmC,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAJ7C,yDAAyD;QACjD,iBAAY,GAAG,IAAI,iBAAO,EAAW,CAAC;QAC9C,uBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;IAEL,CAAC;IAElD,4BAAM,GAAN,UAAO,KAAa,EAAE,QAAgB;QAClC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACjC,KAAK,EAAE,KAAK;YACZ,QAAQ,EAAE,QAAQ;SACrB,CAAC;aACG,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aACtB,KAAK,CAAC,UAAA,KAAK;YACR,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACX,CAAC;IAED,4BAAM,GAAN,UAAO,KAAa,EAAE,QAAgB;QAClC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACjC,KAAK,EAAE,KAAK;YACZ,QAAQ,EAAE,QAAQ;SACrB,CAAC;aACG,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aACtB,KAAK,CAAC,UAAA,KAAK;YACR,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACX,CAAC;IAED,+DAA+D;IAC/D,4BAAM,GAAN;QACI,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACjC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAED,6DAA6D;IAC7D,+BAAS,GAAT,UAAU,KAAa;QACnB,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACrC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED,qCAAqC;IACrC,oCAAc,GAAd;QACI,IAAI,MAAe,CAAC;QACpB,EAAE,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAChC,MAAM,GAAG,IAAI,CAAC;QAClB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,GAAG,KAAK,CAAC;QACnB,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IA7CY;mBAAC,aAAM,CAAC,WAAI,CAAC;;mBAAA;IA+C9B,kBAAC;AAAD,CAAC,AArDD,IAqDC;AArDY,mBAAW,cAqDvB,CAAA","sourcesContent":["import {Injectable, Inject} from '@angular/core';\nimport {Http} from '@angular/http';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from \"rxjs/Subject\";\nimport 'rxjs/Rx';\n\nInjectable()\nexport class AuthService {\n\n    // for change the navbar state between online and offline\n    private authenticate = new Subject<boolean>();\n    authenticateState$ = this.authenticate.asObservable();\n\n    constructor( @Inject(Http) private http: Http) { }\n\n    signup(email: string, password: string): Observable<any> {\n        return this.http.post('/api/signup', {\n            email: email,\n            password: password\n        })\n            .map(res => res.json())\n            .catch(error => {\n                return Observable.throw(error.json());\n            });\n    }\n\n    signin(email: string, password: string): Observable<any> {\n        return this.http.post('/api/signin', {\n            email: email,\n            password: password\n        })\n            .map(res => res.json())\n            .catch(error => {\n                return Observable.throw(error.json());\n            });\n    }\n\n    // delete the token in localStorage and change the navbar state\n    logout(): void {\n        localStorage.removeItem('token');\n        this.authenticate.next(false);\n    }\n\n    // save the token in localStorage and change the navbar state\n    saveToken(token: string): void {\n        localStorage.setItem('token', token);\n        this.authenticate.next(true);\n    }\n\n    // return if the user is authenticate\n    isAuthenticate(): boolean {\n        let isAuth: boolean;\n        if (localStorage.getItem('token')) {\n            isAuth = true;\n        } else {\n            isAuth = false;\n        }\n        return isAuth;\n    }\n\n}"]}