{"version":3,"file":"signup.component.js","sourceRoot":"","sources":["../../home/tallion.com.ar/nolgiati/Desktop/ng2-document-type-authentication/tmp/broccoli_type_script_compiler-input_base_path-lKBsqI6H.tmp/0/src/app/auth/signup.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAkC,eAAe,CAAC,CAAA;AAClD,sBAA0F,gBAAgB,CAAC,CAAA;AAE3G,6BAA4B,gBAAgB,CAAC,CAAA;AAwB7C;IAKI,yBAAoB,EAAe,EAAU,WAAwB;QAAjD,OAAE,GAAF,EAAE,CAAa;QAAU,gBAAW,GAAX,WAAW,CAAa;QAHrE,UAAK,GAAG,KAAK,CAAC;QACd,iBAAY,GAAG,EAAE,CAAC;IAEsD,CAAC;IAEzE,kCAAQ,GAAR;QACE,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACjD,CAAC;IAED,kCAAQ,GAAR;QACI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACxB,KAAK,EAAE,CAAC,EAAE,EAAE,kBAAU,CAAC,OAAO,CAAC;oBAC3B,kBAAU,CAAC,QAAQ;oBACnB,IAAI,CAAC,OAAO;iBACf,CAAC,CAAC;YACH,QAAQ,EAAE,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,CAAC;YACnC,eAAe,EAAE,CAAC,EAAE,EAAE,kBAAU,CAAC,OAAO,CAAC;oBACrC,kBAAU,CAAC,QAAQ;oBACnB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC;iBAClC,CAAC,CAAC;SACN,CAAC,CAAC;IACP,CAAC;IAED,iCAAO,GAAP,UAAQ,OAAoB;QACxB,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC,CAAC,CAAC;YAC3D,MAAM,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;QAC3B,CAAC;IACL,CAAC;IAED,yCAAe,GAAf,UAAgB,OAAoB;QAChC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,EAAC,iBAAiB,EAAE,IAAI,EAAC,CAAC;QAErC,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,KAAK,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YAC3D,MAAM,CAAC,EAAC,iBAAiB,EAAE,IAAI,EAAC,CAAC;QACrC,CAAC;IACL,CAAC;IA7DL;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,8vCAmBT;SACJ,CAAC;;uBAAA;IAyCF,sBAAC;AAAD,CAAC,AAxCD,IAwCC;AAxCY,uBAAe,kBAwC3B,CAAA","sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators, FormControl, REACTIVE_FORM_DIRECTIVES } from \"@angular/forms\";\n\nimport { AuthService } from \"./auth.service\";\n\n@Component({\n    template: `\n        <h3>Please sign up to use all features</h3>\n        <form [formGroup]=\"myForm\" (ngSubmit)=\"onSignup()\">\n            <div class=\"form-group\">\n                <label for=\"email\">E-Mail</label>\n                <input formControlName=\"email\" type=\"email\" id=\"email\" #email class=\"form-control\">\n                <span *ngIf=\"!email.pristine && email.errors != null && email.errors['noEmail']\">Invalid mail address</span>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"password\">Password</label>\n                <input formControlName=\"password\" type=\"password\" id=\"password\" class=\"form-control\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"confirm-password\">Confirm Password</label>\n                <input formControlName=\"confirmPassword\" type=\"password\" id=\"confirm-password\" #confirmPassword class=\"form-control\">\n                <span *ngIf=\"!confirmPassword.pristine && confirmPassword.errors != null && confirmPassword.errors['passwordsNotMatch']\">Passwords do not match</span>\n            </div>\n            <button type=\"submit\" [disabled]=\"!myForm.valid\" class=\"btn btn-primary\">Sign Up</button>\n        </form>\n    `\n})\nexport class SignupComponent implements OnInit {\n    myForm: FormGroup;\n    error = false;\n    errorMessage = '';\n\n    constructor(private fb: FormBuilder, private authService: AuthService) {}\n\n    onSignup() {\n      this.authService.signupUser(this.myForm.value);\n    }\n\n    ngOnInit(): any {\n        this.myForm = this.fb.group({\n            email: ['', Validators.compose([\n                Validators.required,\n                this.isEmail\n            ])],\n            password: ['', Validators.required],\n            confirmPassword: ['', Validators.compose([\n                Validators.required,\n                this.isEqualPassword.bind(this)\n            ])],\n        });\n    }\n\n    isEmail(control: FormControl): {[s: string]: boolean} {\n        if (!control.value.match(/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/)) {\n            return {noEmail: true};\n        }\n    }\n\n    isEqualPassword(control: FormControl): {[s: string]: boolean} {\n        if (!this.myForm) {\n            return {passwordsNotMatch: true};\n\n        }\n        if (control.value !== this.myForm.controls['password'].value) {\n            return {passwordsNotMatch: true};\n        }\n    }\n}\n"]}